<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>crazybit&#39;s Blog</title>
        <description>Join me as I explore blockchain technology to secure life, liberty, and property for all.</description>
        <link>/</link>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
        <pubDate>Tue, 22 Nov 2016 21:43:02 +0800</pubDate>
        <lastBuildDate>Tue, 22 Nov 2016 21:43:02 +0800</lastBuildDate>
        <generator>Jekyll v2.2.0</generator>
        
            <item>
                <title>Hyperledger Fabric 虚拟机</title>
                <description>&lt;h2 id=&quot;fabric-&quot;&gt;fabric 虚拟机&lt;/h2&gt;

&lt;p&gt;Hyperledger最核心的东西是chaincode,而用来运行chaincode的环境则是图灵完备的VM,本文试图通过源码分析来理解fabric的VM设计&lt;/p&gt;

&lt;p&gt;fabric从设计上是支持vm的多种实现的，目前可选择的有inproc和docker，但是现在测试和实际运行环境基本都选择用docker。严格来说，目前fabric本身并不实现VM,而是选择现成的VM,比如docker。
具体的做法通过docker client发送相关的操作到宿主主机的docker server进程上，而docker client则选择（github.com/fsouza/go-dockerclient）&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;下面简单分析相关代码的用途&lt;/p&gt;

&lt;h3 id=&quot;corecontainervmgo&quot;&gt;core/container/vm.go&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;go
type VM struct{  
    Client *docker.Client //VM本质上是一个docker client  
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;列出现有的image，相当于在宿主发送docker命令&lt;code&gt;docker images&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;go
func (vm *VM) ListImages(context context.Context) error {
    ...
    imgs, err := vm.Client.ListImages(docker.ListImagesOptions{All: false})
    ...
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过chaincode描述结构&lt;code&gt;ChaincodeSpec&lt;/code&gt;建立image,相当于在宿主主机发送docker命令&lt;code&gt;docker　build&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;go
func (vm *VM) BuildChaincodeContainer(spec *pb.ChaincodeSpec) ([]byte, error){
    ...
    err := vm.Client.BuildImage(opts)
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;corecontainercontrolgo&quot;&gt;core/container/control.go&lt;/h3&gt;
&lt;p&gt;则声明的vm的共同函数接口，不同的vm需要实现这些方法
```go
type vm interface {
	Deploy(…) error              //创建image
	Start(…) error               //启动VM
	Stop(…) error                //停止VM
	Destroy(…) error             //销毁VM
	GetVMName(…) (string, error) //获取VM名
}&lt;/p&gt;

&lt;p&gt;此方法会被之后分析的&lt;code&gt;chaincodeSupport&lt;/code&gt;调用，根据接口&lt;code&gt;VMCReqIntf&lt;/code&gt;不同实现的do方法调用具体VM的Deploy,Start,Stop,Destory方法
func VMCProcess(ctxt context.Context, vmtype string, req VMCReqIntf) (interface{}, error) {
    …
    resp = req.do(ctxt, v)
    …
}
type VMCReqIntf interface {
	do(ctxt context.Context, v vm) VMCResp
	getCCID() ccintf.CCID
}&lt;/p&gt;

&lt;p&gt;```
目前VM的具体的实现有以下两种:&lt;br /&gt;
&lt;code&gt;core/container/dockercontroller/dockercontroller.go&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;core/container/inproccontroller/inproccontroller.go&lt;/code&gt;&lt;/p&gt;

</description>
                <pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
                <link>/2016/11/22/hyperledger-fabric-/</link>
                <guid isPermaLink="true">/2016/11/22/hyperledger-fabric-/</guid>
                
                
            </item>
        
    </channel>
</rss>
